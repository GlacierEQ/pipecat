cmake_minimum_required(VERSION 3.15)
project(pipecat 
    VERSION 0.2.0
    DESCRIPTION "Real-time AI pipelines for complex AI communications stacks"
    LANGUAGES C CXX Python)

# Set C++ standard
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_POSITION_INDEPENDENT_CODE ON)

# Find Python interpreter and development packages
find_package(Python 3.9 REQUIRED COMPONENTS Interpreter Development NumPy)
find_package(pybind11 CONFIG REQUIRED)

# Enable Ninja build if available with optimal settings
find_program(NINJA_EXECUTABLE ninja)
if(NINJA_EXECUTABLE)
    set(CMAKE_GENERATOR "Ninja" CACHE INTERNAL "" FORCE)
    message(STATUS "Using Ninja build generator")
    
    # Optimize Ninja for maximum performance
    set(CMAKE_JOB_POOL_COMPILE "compile")
    set(CMAKE_JOB_POOL_LINK "link")
    set(CMAKE_JOB_POOLS 
        "compile=${CMAKE_BUILD_PARALLEL_LEVEL}"
        "link=${CMAKE_BUILD_PARALLEL_LEVEL}")
endif()

# Enable ccache if available for faster rebuilds
find_program(CCACHE_EXECUTABLE ccache)
if(CCACHE_EXECUTABLE)
    set(CMAKE_C_COMPILER_LAUNCHER "${CCACHE_EXECUTABLE}")
    set(CMAKE_CXX_COMPILER_LAUNCHER "${CCACHE_EXECUTABLE}")
    message(STATUS "Using ccache: ${CCACHE_EXECUTABLE}")
endif()

# Add performance optimization flags
if(CMAKE_CXX_COMPILER_ID MATCHES "GNU|Clang")
    add_compile_options(-O3 -march=native -mtune=native -pipe)
    if(CMAKE_CXX_COMPILER_ID MATCHES "GNU")
        add_compile_options(-flto -fno-fat-lto-objects)
        add_link_options(-flto)
    elseif(CMAKE_CXX_COMPILER_ID MATCHES "Clang")
        add_compile_options(-flto=thin)
        add_link_options(-flto=thin)
    endif()
elseif(MSVC)
    add_compile_options(/O2 /GL /arch:AVX2)
    add_link_options(/LTCG)
endif()

# Add OpenMP support for parallel processing
find_package(OpenMP)
if(OpenMP_CXX_FOUND)
    add_compile_options(${OpenMP_CXX_FLAGS})
    add_link_options(${OpenMP_CXX_FLAGS})
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
    message(STATUS "OpenMP found and enabled")
endif()

# Set up precompiled headers for faster compilation
if(CMAKE_VERSION VERSION_GREATER_EQUAL 3.16)
    # Common headers for precompilation
    set(PRECOMPILED_HEADERS
        <vector>
        <string>
        <memory>
        <unordered_map>
        <algorithm>
    )
endif()

# Define extension modules directory
set(EXTENSIONS_DIR "${CMAKE_CURRENT_SOURCE_DIR}/src/pipecat/extensions")

# Add extension modules
add_subdirectory(${EXTENSIONS_DIR}/optimized_processing)
add_subdirectory(${EXTENSIONS_DIR}/audio_processing)

# Cache external dependencies
set(CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY ON)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# Testing (optional)
option(BUILD_TESTING "Build tests" ON)
if(BUILD_TESTING)
    enable_testing()
    add_subdirectory(tests/cpp)
endif()

# Benchmarking (optional)
option(BUILD_BENCHMARKS "Build benchmarks" OFF)
if(BUILD_BENCHMARKS)
    add_subdirectory(benchmarks)
endif()

# Install targets
install(
    DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/src/pipecat"
    DESTINATION "${Python_SITEPACKAGES_DIR}"
    FILES_MATCHING
    PATTERN "*.py"
    PATTERN "__pycache__" EXCLUDE
    PATTERN "*.egg-info" EXCLUDE
)

# Print build configuration summary
message(STATUS "Build type: ${CMAKE_BUILD_TYPE}")
message(STATUS "Python: ${Python_EXECUTABLE}")
message(STATUS "Python include: ${Python_INCLUDE_DIRS}")
message(STATUS "Python site packages: ${Python_SITEPACKAGES_DIR}")
message(STATUS "Compiler: ${CMAKE_CXX_COMPILER_ID} ${CMAKE_CXX_COMPILER_VERSION}")
message(STATUS "C++ flags: ${CMAKE_CXX_FLAGS}")
message(STATUS "Build parallelism: ${CMAKE_BUILD_PARALLEL_LEVEL}")
