FROM python:3.11-slim as base

# Set build arguments and environment variables
ARG BUILD_TYPE=Release
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONPATH=/app/src \
    PIPECAT_CACHE_DIR=/app/cache \
    CMAKE_BUILD_TYPE=${BUILD_TYPE} \
    CMAKE_GENERATOR=Ninja \
    CMAKE_BUILD_PARALLEL_LEVEL=12 \
    NINJA_STATUS="[%p|%f/%t] [%es] "

# Install system dependencies with optimized cache
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    cmake \
    ninja-build \
    ccache \
    git \
    libfftw3-dev \
    python3-dev \
    clang \
    lld \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && mkdir -p /app/cache && chmod 777 /app/cache

# Configure ccache for better performance
RUN ccache --max-size=5G \
    && ccache --set-config=sloppiness=pch_defines,time_macros,include_file_mtime \
    && ccache --set-config=compression=true \
    && ccache --set-config=compression_level=6

# Create working directory
WORKDIR /app

# Copy only requirements files first for better caching
COPY requirements.txt /app/
COPY pyproject.toml /app/

# Install Python dependencies
RUN pip install --no-cache-dir -U pip setuptools wheel && \
    pip install --no-cache-dir ninja pybind11 scikit-build numpy && \
    pip install --no-cache-dir -r requirements.txt

# Copy the rest of the application
COPY . /app/

# Build C++ extensions with optimized configuration
RUN mkdir -p build/Release && \
    cd build/Release && \
    cmake ../.. -G Ninja \
      -DCMAKE_BUILD_TYPE=Release \
      -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
      -DCMAKE_C_COMPILER_LAUNCHER=ccache \
      -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
      -DCMAKE_BUILD_PARALLEL_LEVEL=12 \
      -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON \
      -DBUILD_TESTING=OFF && \
    cmake --build . --parallel 12 && \
    cmake --install . --prefix /app/install && \
    # Copy built extensions to source tree
    cp -r /app/install/pipecat/* /app/src/pipecat/ && \
    # Clean up build files to reduce image size
    ccache -c && \
    rm -rf /app/build

# Install the package in development mode
RUN pip install -e .

# Create a non-root user to run the application
RUN groupadd -r pipecat && \
    useradd -r -g pipecat pipecat && \
    chown -R pipecat:pipecat /app/cache

# Use the non-root user
USER pipecat

# Expose the necessary ports
EXPOSE 8000 8080

# Set the entry point
ENTRYPOINT ["python", "-m", "pipecat.cli"]

# Default command
CMD ["dashboard", "--host", "0.0.0.0", "--port", "8080"]
